{"version":3,"sources":["AppData.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["AppData","appName","appId","clientId","clientSecret","corsAnywhereUrl","OAuth","require","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","oauth","OAuth2","oauthWithProxy","useAuthorizationHeaderforGET","saveLoginResults","bind","assertThisInitialized","saveGameId","code","queryString","parse","location","search","getOAuthAccessToken","grant_type","redirect_uri","window","assign","getAuthorizeUrl","response_type","e","access_token","refresh_token","console","log","get","setState","refreshToken","response","react_default","a","createElement","Component","withRouter","App","className","BrowserRouter","Switch","Route","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sZAAeA,EAAA,CACbC,QAAS,kBACTC,MAAO,WACPC,SAAU,+DACVC,aAAc,2CACdC,gBAAiB,mECCfC,EAAQC,EAAQ,KAEdC,cACJ,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAAIZ,EAAMa,OAAOnB,EAAQG,SAAUH,EAAQI,aAAc,+BAAgC,sBAAuB,oBACvHgB,eAAgB,IAAId,EAAMa,OAAOnB,EAAQG,SAAUH,EAAQI,aAAcJ,EAAQK,gBAAkB,+BAAgC,sBAAuB,qBAE5JK,EAAKO,MAAMG,eAAeC,8BAA6B,GACvDX,EAAKY,iBAAmBZ,EAAKY,iBAAiBC,KAAtBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACxBA,EAAKe,WAAaf,EAAKe,WAAWF,KAAhBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KARAA,yHAWKD,0EACnBiB,EAAQC,IAAYC,MAAMf,KAAKJ,MAAMoB,SAASC,QAASJ,OAC7Cb,KAAKI,MAAMS,KAMvBb,KAAKI,MAAMG,eAAeW,oBAAoBL,EAAM,CAClDM,WAAY,qBACZC,aAAc,qCACbpB,KAAKS,kBARRY,OAAOL,SAASM,OAAOtB,KAAKI,MAAMC,MAAMkB,gBAAgB,CACtDH,aAAc,oCACdI,cAAe,sJAUHC,EAAGZ,EAAMa,EAAcC,GACnCF,EACFG,QAAQC,IAAIJ,IAEZG,QAAQC,IAAI,YACZD,QAAQC,IAAI,SAAUH,GACtBE,QAAQC,IAAI,UAAWF,GACvB3B,KAAKI,MAAMG,eAAeuB,IAAI3C,EAAQK,gBAAkB,sEAAuEmC,EAAcD,aAAc1B,KAAKY,aAElKZ,KAAK+B,SAAS,CACZlB,KAAMA,EACNmB,aAAcL,uCAIPM,GACTL,QAAQC,IAAI,WAAYI,oCAIxB,OACEC,EAAAC,EAAAC,cAAA,wBAhDaC,aA0DJC,cAAW3C,8BC9CX4C,mLAZX,OACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWlD,cAPrB0C,aCOES,QACW,cAA7BzB,OAAOL,SAAS+B,UAEe,UAA7B1B,OAAOL,SAAS+B,UAEhB1B,OAAOL,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a6c40c1d.chunk.js","sourcesContent":["export default {\r\n  appName: 'juanpierresucks',\r\n  appId: 'mxfalV3c',\r\n  clientId: 'dj0yJmk9WW9hSlNxcDllcUZwJnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTU5',\r\n  clientSecret: '4a1c4d6e5af02bfe69e226d666a5113a7b2b35a6',\r\n  corsAnywhereUrl: 'https://cors-anywhere.herokuapp.com/'\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport AppData from './AppData';\r\nimport { withRouter } from 'react-router';\r\nimport queryString from 'query-string';\r\nvar OAuth = require('oauth');\r\n\r\nclass Main extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      oauth: new OAuth.OAuth2(AppData.clientId, AppData.clientSecret, 'https://api.login.yahoo.com/', 'oauth2/request_auth', 'oauth2/get_token'),\r\n      oauthWithProxy: new OAuth.OAuth2(AppData.clientId, AppData.clientSecret, AppData.corsAnywhereUrl + 'https://api.login.yahoo.com/', 'oauth2/request_auth', 'oauth2/get_token')\r\n    };\r\n    this.state.oauthWithProxy.useAuthorizationHeaderforGET(true);\r\n    this.saveLoginResults = this.saveLoginResults.bind(this);\r\n    this.saveGameId = this.saveGameId.bind(this);\r\n  }\r\n\r\n  async componentDidMount (props) {\r\n    let code = (queryString.parse(this.props.location.search)).code;\r\n    if (!code && !this.state.code) {\r\n      window.location.assign(this.state.oauth.getAuthorizeUrl({\r\n        redirect_uri: 'https://mwilkens731.github.io/jps',\r\n        response_type: 'code'\r\n      }));\r\n    } else {\r\n      this.state.oauthWithProxy.getOAuthAccessToken(code, {\r\n        grant_type: 'authorization_code',\r\n        redirect_uri: 'https://mwilkens731.github.io/jps'\r\n      }, this.saveLoginResults);\n    }\r\n  }\r\n\r\n  saveLoginResults (e, code, access_token, refresh_token) {\r\n    if (e) {\r\n      console.log(e);\r\n    } else {\r\n      console.log('success!');\r\n      console.log('access', access_token);\r\n      console.log('refresh', refresh_token);\r\n      this.state.oauthWithProxy.get(AppData.corsAnywhereUrl + 'https://fantasysports.yahooapis.com/fantasy/v2/game/mlb?format=json', refresh_token.access_token, this.saveGameId);\r\n    }\r\n    this.setState({\r\n      code: code,\r\n      refreshToken: refresh_token\r\n    });\r\n  }\r\n\r\n  saveGameId(response){\r\n    console.log('response', response);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>Hi</div>\r\n    );\n  }\r\n}\r\n\r\nMain.propTypes = {\r\n  history: PropTypes.object.isRequired,\r\n  location: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withRouter(Main);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './Main';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div className='App'>\n        <BrowserRouter>\n          <Switch>\n            <Route path='/' component={Main} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}