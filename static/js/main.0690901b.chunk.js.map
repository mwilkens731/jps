{"version":3,"sources":["AppData.js","Main.js","Auth.js","App.js","serviceWorker.js","index.js"],"names":["AppData","appName","appId","clientId","clientSecret","OAuth","require","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","oauth","OAuth2","prevProps","token","console","log","getAuthorizeUrl","redirect_uri","response_type","history","push","gameKey","react_default","a","createElement","Component","withRouter","Auth","App","className","BrowserRouter","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8YAAeA,EAAA,CACbC,QAAS,kBACTC,MAAO,WACPC,SAAU,+DACVC,aAAc,qDCCZC,EAAQC,EAAQ,KAEdC,cACJ,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAAIZ,EAAMa,OAAOlB,EAAQG,SAAUH,EAAQI,aAAc,+BAAgC,sBAAuB,qBAHvGK,yHAOKU,mEAClBP,KAAKI,MAAMI,QACdC,QAAQC,IAAI,KAAMV,KAAKI,MAAMC,MAAMM,gBAAgB,CACjDC,aAAc,wCACdC,cAAe,UAEjBb,KAAKJ,MAAMkB,QAAQC,KAAKf,KAAKI,MAAMC,MAAMM,gBAAgB,CACvDC,aAAc,wCACdC,cAAe,WAOdb,KAAKI,MAAMY,SAEdP,QAAQC,IAAI,KAAMV,KAAKI,2IAKzB,OACEa,EAAAC,EAAAC,cAAA,wBA/BaC,aAyCJC,cAAW1B,GC7CpB2B,mLAGF,OADAb,QAAQC,IAAI,WAEVO,EAAAC,EAAAC,cAAA,2BAJaC,gBAUJC,YAAWC,6BCSXC,mLAbX,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWlC,IAC3BsB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,KAAK,OAAOC,UAAWP,cARxBF,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0690901b.chunk.js","sourcesContent":["export default {\r\n  appName: 'juanpierresucks',\r\n  appId: 'I3qu2d7g',\r\n  clientId: 'dj0yJmk9VHIxWGpCa01HdHZCJnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PWMy',\r\n  clientSecret: '92855d6af610152f337fa0fd59f5c13544074bb6'\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport AppData from './AppData';\r\nimport { withRouter } from 'react-router';\r\nvar OAuth = require('oauth');\r\n\r\nclass Main extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      oauth: new OAuth.OAuth2(AppData.clientId, AppData.clientSecret, 'https://api.login.yahoo.com/', 'oauth2/request_auth', 'oauth2/get_token')\r\n    };\r\n  }\r\n\r\n  async componentDidMount (prevProps) {\r\n    if (!this.state.token) {\r\n      console.log('in', this.state.oauth.getAuthorizeUrl({\r\n        redirect_uri: 'http://mwilkens731.github.io/jps/auth',\r\n        response_type: 'code'\r\n      }));\r\n      this.props.history.push(this.state.oauth.getAuthorizeUrl({\r\n        redirect_uri: 'http://mwilkens731.github.io/jps/auth',\r\n        response_type: 'code'\r\n      }));\r\n      // let result = await this.state.oauth.getOAuthAccessToken('', {'grant_type': 'refresh_token'}, (res) => {\r\n      //   console.log('res', res);\r\n      // });\r\n      // console.log('results', result);\r\n    }\r\n    if (!this.state.gameKey) {\n      // this.setState({gameKey: gameKeyResponse.gameKey});\r\n      console.log('hi', this.state);\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>Hi</div>\r\n    );\n  }\r\n}\r\n\r\nMain.propTypes = {\r\n  history: PropTypes.object.isRequired,\r\n  location: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withRouter(Main);\r\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\n\nclass Auth extends Component {\n  render () {\n    console.log('in auth');\n    return (\n      <div>IN!!!</div>\n    );\n  }\n}\n\nexport {Auth};\nexport default withRouter(Auth);\n","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './Main';\nimport {Auth} from './Auth';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div className='App'>\n        <BrowserRouter>\n          <Switch>\n            <Route path='/' component={Main} />\n            <Route path='auth' component={Auth} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}